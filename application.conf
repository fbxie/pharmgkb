deepdive {
  
  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://localhost/deepdive_titles"
    user: "czhang"
    password: "bB19871121"
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{
    drug_mentions.is_correct: Boolean
    gene_mentions.is_correct: Boolean
    relations.is_correct: Boolean
  }

  extraction.extractors: {

    load_docids:{
        output_relation: "docids"
        input: "SELECT 0"
        udf: "../pharmgkb/py/load_docids.py"
    }

    load_docs:{
        output_relation: "documents"
        input: "SELECT * FROM docids"
        udf: "../pharmgkb/py/load_docs.py"
        output_batch_size: 100
        parallelism: 8
        input_batch_size: 10
        dependencies: ["load_docids"]
    }

    load_sents:{
        output_relation: "sentences"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_sents.py"
        parallelism: 8
        output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

    load_gene_mentions:{
        output_relation: "gene_mentions"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_gene_mentions.py"
        parallelism: 1
        dependencies: ["load_docs", "load_sents"]
        after: "../pharmgkb/py/update_mention_table.sh"
    }

    load_drug_mentions:{
        output_relation: "drug_mentions"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_drug_mentions.py"
        parallelism: 1
        dependencies: ["load_gene_mentions"]
    }

    load_relations:{
        output_relation: "relations"
        input: "SELECT t0.object as m1, t1.object as m2, t2.sentence from drug_mentions t0, gene_mentions t1, sentences t2 WHERE t0.sentid = t1.sentid AND t0.sentid = t2.sentid"
        udf: "../pharmgkb/py/load_relations.py"
        parallelism: 1
        dependencies: ["load_drug_mentions"]
    }

    load_negative_relations:{
        output_relation: "relations"
        input: "SELECT t0.object as m1, t1.object as m2, t2.sentence from gene_mentions t0, gene_mentions t1, sentences t2 WHERE t0.sentid = t1.sentid AND t0.sentid = t2.sentid LIMIT 10000;"
        udf: "../pharmgkb/py/load_negative_relations.py"
        parallelism: 1
        dependencies: ["load_relations"]
    }

  }

  inference.factors: {

    drug_mention_factors_single.input_query: "select t0.id as \"t0.id\", t0.is_correct as \"t0.is_correct\", unnest(t0.features) as \"t0.feature\" from drug_mentions t0;"
    drug_mention_factors_single.function: "drug_mentions.t0.is_correct = Imply()"
    drug_mention_factors_single.weight: "?(.t0.feature)"

    drug_mention_factors_bias.input_query: "select * from drug_mentions t0"
    drug_mention_factors_bias.function: "drug_mentions.is_correct = Imply()"
    drug_mention_factors_bias.weight: "?(drug_mentions.type)"

    gene_mention_factors_single.input_query: "select t0.id as \"t0.id\", t0.is_correct as \"t0.is_correct\", unnest(t0.features) as \"t0.feature\" from gene_mentions t0;"
    gene_mention_factors_single.function: "gene_mentions.t0.is_correct = Imply()"
    gene_mention_factors_single.weight: "?(.t0.feature)"

    gene_mention_factors_bias.input_query: "select * from gene_mentions t0"
    gene_mention_factors_bias.function: "gene_mentions.is_correct = Imply()"
    gene_mention_factors_bias.weight: "?(gene_mentions.type)"

    relation_factors_single.input_query: "select t0.id as \"t0.id\", t0.is_correct as \"t0.is_correct\", unnest(t0.features) as \"t0.feature\" from relations t0;"
    relation_factors_single.function: "relations.t0.is_correct = Imply()"
    relation_factors_single.weight: "?(.t0.feature)"

    relation_factors_bias.input_query: "select * from relations t0"
    relation_factors_bias.function: "relations.is_correct = Imply()"
    relation_factors_bias.weight: "?(relations.type)"

  }

  sampler.sampler_args: "-l 100 -s 1 -i 1000 -t 4 --diminish 0.95 --alpha 0.1"
  sampler.java_args = "-Xmx8g"

}













