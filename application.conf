deepdive {
  
  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://localhost/deepdive_titles"
    user: "czhang"
    password: "bB19871121"
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{
    mentions.is_correct: Boolean
    relations.is_correct: Boolean
  }

  extraction.extractors: {

    load_docs:{
        output_relation: "documents"
        input: "SELECT 0"
        udf: "../pharmgkb/py/load_docs.py"
        #output_batch_size: 1000000
        #dependencies: ["load_relation_candidates4"]
    }

    load_mentions:{
        output_relation: "mentions"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_mentions.py"
        #output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

    load_mention_features:{
        output_relation: "mention_features"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_mention_features.py"
        #output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

    load_dependencies:{
        output_relation: "dependencies"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_dependencies.py"
        #output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

    load_relations:{
        output_relation: "relations"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_relations.py"
        #output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

    load_relation_features:{
        output_relation: "relation_features"
        input: "SELECT * from documents"
        udf: "../pharmgkb/py/load_relation_features.py"
        #output_batch_size: 1000000
        dependencies: ["load_docs"]
    }

  }

  inference.factors: {

    mention_factors_single.input_query: "select * from mentions t0, mention_features t1 WHERE t0.mid=t1.mid"
    mention_factors_single.function: "mentions.is_correct = Imply()"
    mention_factors_single.weight: "?(mention_features.feature)"

    mention_factors_bias.input_query: "select * from mentions t0"
    mention_factors_bias.function: "mentions.is_correct = Imply()"
    mention_factors_bias.weight: "?(mentions.type)"

    mention_factors_dep.input_query: "select t0.is_correct as \"t0.is_correct\", t1.is_correct as \"t1.is_correct\", t0.id as \"t0.id\", t1.id as \"t1.id\", t2.feature from mentions t0, mentions t1, dependencies t2 WHERE t0.mid=t2.mid1 AND t1.mid=t2.mid2"
    mention_factors_dep.function: "mentions.t0.is_correct = Imply(mentions.t1.is_correct)"
    mention_factors_dep.weight: "?(dependencies.feature)" 

    relation_factors_single.input_query: "select * from relations t0, relation_features t1 WHERE t0.gene_id=t1.gene_id and t0.drug_id=t1.drug_id"
    relation_factors_single.function: "relations.is_correct = Imply()"
    relation_factors_single.weight: "?(relation_features.feature)"

    relation_factors_bias.input_query: "select * from relations t0"
    relation_factors_bias.function: "relations.is_correct = Imply()"
    relation_factors_bias.weight: "?(relations.type)"

  }

  sampler.sampler_args: "-l 200 -s 10 -i 1000 -t 4 --diminish 0.95 --alpha 0.1"
  sampler.java_args = "-Xmx8g"

}













